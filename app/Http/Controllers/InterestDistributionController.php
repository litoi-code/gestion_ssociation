<?php

namespace App\Http\Controllers;

use App\Models\Member;
use App\Models\InterestDistribution;
use App\Models\Fund;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class InterestDistributionController extends Controller
{
    public function index()
    {
        $distributions = InterestDistribution::with(['member', 'fund'])
            ->latest()
            ->paginate(10);
        
        return view('interest_distributions.index', compact('distributions'));
    }

    public function create()
    {
        $members = Member::all();
        $funds = Fund::all();
        return view('interest_distributions.create', compact('members', 'funds'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'member_id' => 'required|exists:members,id',
            'fund_id' => 'required|exists:funds,id',
            'date' => 'required|date',
            'share_percentage' => 'required|numeric|min:0|max:100',
            'interest_amount' => 'required|numeric|min:0',
        ]);

        InterestDistribution::create($validated);

        return redirect()->route('interest-distributions.index')
            ->with('success', 'Interest distribution created successfully.');
    }

    public function show(InterestDistribution $interestDistribution)
    {
        // Change variable name from $interestDistribution to $distribution
        $distribution = $interestDistribution;
        return view('interest_distributions.show', compact('distribution'));
    }

    public function edit(InterestDistribution $interestDistribution)
    {
        $members = Member::all();
        $funds = Fund::all();
        return view('interest_distributions.edit', 
            compact('interestDistribution', 'members', 'funds'));
    }

    public function update(Request $request, InterestDistribution $interestDistribution)
    {
        $validated = $request->validate([
            'member_id' => 'required|exists:members,id',
            'fund_id' => 'required|exists:funds,id',
            'date' => 'required|date',
            'share_percentage' => 'required|numeric|min:0|max:100',
            'interest_amount' => 'required|numeric|min:0',
        ]);

        $interestDistribution->update($validated);

        return redirect()->route('interest-distributions.index')
            ->with('success', 'Interest distribution updated successfully.');
    }

    public function destroy(InterestDistribution $interestDistribution)
    {
        $interestDistribution->delete();

        return redirect()->route('interest-distributions.index')
            ->with('success', 'Interest distribution deleted successfully.');
    }

    public function calculateMemberShare(Member $member)
    {
        // Wrap in a database transaction to ensure data consistency
        return DB::transaction(function () use ($member) {
            // Get the investment fund with a lock for update to prevent race conditions
            $investmentFund = Fund::where('type', 'investment')
                ->lockForUpdate()
                ->first();
            
            if (!$investmentFund) {
                return back()->with('error', 'Investment fund not found.');
            }

            // Get total interest generated by the fund
            $totalInterest = $investmentFund->total_interest;
            
            if ($totalInterest <= 0) {
                return back()->with('error', 'No interest has been generated by the fund yet.');
            }

            // Calculate total contributions to investment fund
            $totalFundContributions = $investmentFund->contributions()->sum('amount');
            
            // Calculate member's contributions to investment fund
            $memberContributions = $member->contributions()
                ->where('fund_id', $investmentFund->id)
                ->sum('amount');
            
            // Calculate member's share percentage
            if ($totalFundContributions > 0) {
                $sharePercentage = ($memberContributions / $totalFundContributions) * 100;
            } else {
                $sharePercentage = 0;
            }
            
            // Calculate member's interest amount based on their share of the total interest
            $interestAmount = ($sharePercentage / 100) * $totalInterest;
            
            // Create new interest distribution
            InterestDistribution::create([
                'member_id' => $member->id,
                'fund_id' => $investmentFund->id,
                'date' => now(),
                'share_percentage' => $sharePercentage,
                'interest_amount' => $interestAmount,
            ]);

            // Deduct the distributed interest from the fund's total interest
            $investmentFund->total_interest -= $interestAmount;
            $investmentFund->save();

            return back()->with('success', 'Interest distribution calculated successfully.');
        });
    }

    private function calculateSharePercentage($contributions, $loans)
    {
        // Implement your share percentage calculation logic
        // This is a simple example
        $total = $contributions - $loans;
        return max(0, min(100, ($total / 1000) * 100));
    }

    private function calculateInterestAmount($sharePercentage)
    {
        // Implement your interest amount calculation logic
        // This is a simple example
        return ($sharePercentage / 100) * 1000;
    }
}









